{
  "results": {
    "mmlu_pro": {
      "exact_match,custom-extract": 0.678939494680851,
      "exact_match_stderr,custom-extract": 0.004177825807130108,
      "alias": "mmlu_pro"
    },
    "mmlu_pro_biology": {
      "alias": " - biology",
      "exact_match,custom-extract": 0.8312412831241283,
      "exact_match_stderr,custom-extract": 0.013997167129303042
    },
    "mmlu_pro_business": {
      "alias": " - business",
      "exact_match,custom-extract": 0.7110266159695817,
      "exact_match_stderr,custom-extract": 0.01614762823622606
    },
    "mmlu_pro_chemistry": {
      "alias": " - chemistry",
      "exact_match,custom-extract": 0.6501766784452296,
      "exact_match_stderr,custom-extract": 0.01418106249117346
    },
    "mmlu_pro_computer_science": {
      "alias": " - computer_science",
      "exact_match,custom-extract": 0.6829268292682927,
      "exact_match_stderr,custom-extract": 0.023009394017252945
    },
    "mmlu_pro_economics": {
      "alias": " - economics",
      "exact_match,custom-extract": 0.7725118483412322,
      "exact_match_stderr,custom-extract": 0.01443837037764628
    },
    "mmlu_pro_engineering": {
      "alias": " - engineering",
      "exact_match,custom-extract": 0.5046439628482973,
      "exact_match_stderr,custom-extract": 0.01606991547832282
    },
    "mmlu_pro_health": {
      "alias": " - health",
      "exact_match,custom-extract": 0.7224938875305623,
      "exact_match_stderr,custom-extract": 0.015665430605265703
    },
    "mmlu_pro_history": {
      "alias": " - history",
      "exact_match,custom-extract": 0.6509186351706037,
      "exact_match_stderr,custom-extract": 0.02445315422331157
    },
    "mmlu_pro_law": {
      "alias": " - law",
      "exact_match,custom-extract": 0.522252497729337,
      "exact_match_stderr,custom-extract": 0.015060629781133652
    },
    "mmlu_pro_math": {
      "alias": " - math",
      "exact_match,custom-extract": 0.7209474463360473,
      "exact_match_stderr,custom-extract": 0.012207533374096814
    },
    "mmlu_pro_other": {
      "alias": " - other",
      "exact_match,custom-extract": 0.7283549783549783,
      "exact_match_stderr,custom-extract": 0.014641027997512364
    },
    "mmlu_pro_philosophy": {
      "alias": " - philosophy",
      "exact_match,custom-extract": 0.6192384769539078,
      "exact_match_stderr,custom-extract": 0.021759094743200987
    },
    "mmlu_pro_physics": {
      "alias": " - physics",
      "exact_match,custom-extract": 0.6643571978444958,
      "exact_match_stderr,custom-extract": 0.013106965165026425
    },
    "mmlu_pro_psychology": {
      "alias": " - psychology",
      "exact_match,custom-extract": 0.7794486215538847,
      "exact_match_stderr,custom-extract": 0.014686539382575017
    }
  },
  "groups": {
    "mmlu_pro": {
      "exact_match,custom-extract": 0.678939494680851,
      "exact_match_stderr,custom-extract": 0.004177825807130108,
      "alias": "mmlu_pro"
    }
  },
  "group_subtasks": {
    "mmlu_pro": [
      "mmlu_pro_biology",
      "mmlu_pro_business",
      "mmlu_pro_chemistry",
      "mmlu_pro_computer_science",
      "mmlu_pro_economics",
      "mmlu_pro_engineering",
      "mmlu_pro_health",
      "mmlu_pro_history",
      "mmlu_pro_law",
      "mmlu_pro_math",
      "mmlu_pro_other",
      "mmlu_pro_philosophy",
      "mmlu_pro_physics",
      "mmlu_pro_psychology"
    ]
  },
  "configs": {
    "mmlu_pro_biology": {
      "task": "mmlu_pro_biology",
      "task_alias": "biology",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f20c1632830>, subject='biology')",
      "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c1630a60>, including_answer=False)",
      "doc_to_target": "answer",
      "description": "The following are multiple choice questions (with answers) about biology. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c1631120>, including_answer=True)",
        "doc_to_target": ""
      },
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "</s>",
          "Q:",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "custom-extract",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "answer is \\(?([ABCDEFGHIJ])\\)?"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_business": {
      "task": "mmlu_pro_business",
      "task_alias": "business",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f20c1632680>, subject='business')",
      "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c1631bd0>, including_answer=False)",
      "doc_to_target": "answer",
      "description": "The following are multiple choice questions (with answers) about business. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c16325f0>, including_answer=True)",
        "doc_to_target": ""
      },
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "</s>",
          "Q:",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "custom-extract",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "answer is \\(?([ABCDEFGHIJ])\\)?"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_chemistry": {
      "task": "mmlu_pro_chemistry",
      "task_alias": "chemistry",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f20c1631510>, subject='chemistry')",
      "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c1632950>, including_answer=False)",
      "doc_to_target": "answer",
      "description": "The following are multiple choice questions (with answers) about chemistry. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c1631480>, including_answer=True)",
        "doc_to_target": ""
      },
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "</s>",
          "Q:",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "custom-extract",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "answer is \\(?([ABCDEFGHIJ])\\)?"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_computer_science": {
      "task": "mmlu_pro_computer_science",
      "task_alias": "computer_science",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f20c16316c0>, subject='computer science')",
      "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c16bae60>, including_answer=False)",
      "doc_to_target": "answer",
      "description": "The following are multiple choice questions (with answers) about computer science. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c1632560>, including_answer=True)",
        "doc_to_target": ""
      },
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "</s>",
          "Q:",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "custom-extract",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "answer is \\(?([ABCDEFGHIJ])\\)?"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_economics": {
      "task": "mmlu_pro_economics",
      "task_alias": "economics",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f20c1630ee0>, subject='economics')",
      "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c1633520>, including_answer=False)",
      "doc_to_target": "answer",
      "description": "The following are multiple choice questions (with answers) about economics. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c16336d0>, including_answer=True)",
        "doc_to_target": ""
      },
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "</s>",
          "Q:",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "custom-extract",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "answer is \\(?([ABCDEFGHIJ])\\)?"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_engineering": {
      "task": "mmlu_pro_engineering",
      "task_alias": "engineering",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f20c16bbe20>, subject='engineering')",
      "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c16bb5b0>, including_answer=False)",
      "doc_to_target": "answer",
      "description": "The following are multiple choice questions (with answers) about engineering. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c16bb760>, including_answer=True)",
        "doc_to_target": ""
      },
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "</s>",
          "Q:",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "custom-extract",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "answer is \\(?([ABCDEFGHIJ])\\)?"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_health": {
      "task": "mmlu_pro_health",
      "task_alias": "health",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f20c1631090>, subject='health')",
      "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c1631900>, including_answer=False)",
      "doc_to_target": "answer",
      "description": "The following are multiple choice questions (with answers) about health. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c1631b40>, including_answer=True)",
        "doc_to_target": ""
      },
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "</s>",
          "Q:",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "custom-extract",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "answer is \\(?([ABCDEFGHIJ])\\)?"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_history": {
      "task": "mmlu_pro_history",
      "task_alias": "history",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f20c16baef0>, subject='history')",
      "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c16bbeb0>, including_answer=False)",
      "doc_to_target": "answer",
      "description": "The following are multiple choice questions (with answers) about history. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c16bb370>, including_answer=True)",
        "doc_to_target": ""
      },
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "</s>",
          "Q:",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "custom-extract",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "answer is \\(?([ABCDEFGHIJ])\\)?"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_law": {
      "task": "mmlu_pro_law",
      "task_alias": "law",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f20c16bbd90>, subject='law')",
      "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c42ed6c0>, including_answer=False)",
      "doc_to_target": "answer",
      "description": "The following are multiple choice questions (with answers) about law. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c42edea0>, including_answer=True)",
        "doc_to_target": ""
      },
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "</s>",
          "Q:",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "custom-extract",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "answer is \\(?([ABCDEFGHIJ])\\)?"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_math": {
      "task": "mmlu_pro_math",
      "task_alias": "math",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f20c16bbc70>, subject='math')",
      "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c16ba9e0>, including_answer=False)",
      "doc_to_target": "answer",
      "description": "The following are multiple choice questions (with answers) about math. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c16bbb50>, including_answer=True)",
        "doc_to_target": ""
      },
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "</s>",
          "Q:",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "custom-extract",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "answer is \\(?([ABCDEFGHIJ])\\)?"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_other": {
      "task": "mmlu_pro_other",
      "task_alias": "other",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f20c1633e20>, subject='other')",
      "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c42edc60>, including_answer=False)",
      "doc_to_target": "answer",
      "description": "The following are multiple choice questions (with answers) about other. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c1630e50>, including_answer=True)",
        "doc_to_target": ""
      },
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "</s>",
          "Q:",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "custom-extract",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "answer is \\(?([ABCDEFGHIJ])\\)?"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_philosophy": {
      "task": "mmlu_pro_philosophy",
      "task_alias": "philosophy",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f20c1630040>, subject='philosophy')",
      "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c1630160>, including_answer=False)",
      "doc_to_target": "answer",
      "description": "The following are multiple choice questions (with answers) about philosophy. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c1633a30>, including_answer=True)",
        "doc_to_target": ""
      },
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "</s>",
          "Q:",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "custom-extract",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "answer is \\(?([ABCDEFGHIJ])\\)?"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_physics": {
      "task": "mmlu_pro_physics",
      "task_alias": "physics",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f20c3f32680>, subject='physics')",
      "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c3f32950>, including_answer=False)",
      "doc_to_target": "answer",
      "description": "The following are multiple choice questions (with answers) about physics. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c16bb0a0>, including_answer=True)",
        "doc_to_target": ""
      },
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "</s>",
          "Q:",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "custom-extract",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "answer is \\(?([ABCDEFGHIJ])\\)?"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "mmlu_pro_psychology": {
      "task": "mmlu_pro_psychology",
      "task_alias": "psychology",
      "dataset_path": "TIGER-Lab/MMLU-Pro",
      "test_split": "test",
      "fewshot_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x7f20c42edcf0>, subject='psychology')",
      "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c42edd80>, including_answer=False)",
      "doc_to_target": "answer",
      "description": "The following are multiple choice questions (with answers) about psychology. Think step by step and then finish your answer with \"the answer is (X)\" where X is the correct letter choice.\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "doc_to_text": "functools.partial(<function format_cot_example at 0x7f20c42edbd0>, including_answer=True)",
        "doc_to_target": ""
      },
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "</s>",
          "Q:",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "custom-extract",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "answer is \\(?([ABCDEFGHIJ])\\)?"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    }
  },
  "versions": {
    "mmlu_pro": 2.0,
    "mmlu_pro_biology": 1.0,
    "mmlu_pro_business": 1.0,
    "mmlu_pro_chemistry": 1.0,
    "mmlu_pro_computer_science": 1.0,
    "mmlu_pro_economics": 1.0,
    "mmlu_pro_engineering": 1.0,
    "mmlu_pro_health": 1.0,
    "mmlu_pro_history": 1.0,
    "mmlu_pro_law": 1.0,
    "mmlu_pro_math": 1.0,
    "mmlu_pro_other": 1.0,
    "mmlu_pro_philosophy": 1.0,
    "mmlu_pro_physics": 1.0,
    "mmlu_pro_psychology": 1.0
  },
  "n-shot": {
    "mmlu_pro_biology": 0,
    "mmlu_pro_business": 0,
    "mmlu_pro_chemistry": 0,
    "mmlu_pro_computer_science": 0,
    "mmlu_pro_economics": 0,
    "mmlu_pro_engineering": 0,
    "mmlu_pro_health": 0,
    "mmlu_pro_history": 0,
    "mmlu_pro_law": 0,
    "mmlu_pro_math": 0,
    "mmlu_pro_other": 0,
    "mmlu_pro_philosophy": 0,
    "mmlu_pro_physics": 0,
    "mmlu_pro_psychology": 0
  },
  "higher_is_better": {
    "mmlu_pro": {
      "exact_match": true
    },
    "mmlu_pro_biology": {
      "exact_match": true
    },
    "mmlu_pro_business": {
      "exact_match": true
    },
    "mmlu_pro_chemistry": {
      "exact_match": true
    },
    "mmlu_pro_computer_science": {
      "exact_match": true
    },
    "mmlu_pro_economics": {
      "exact_match": true
    },
    "mmlu_pro_engineering": {
      "exact_match": true
    },
    "mmlu_pro_health": {
      "exact_match": true
    },
    "mmlu_pro_history": {
      "exact_match": true
    },
    "mmlu_pro_law": {
      "exact_match": true
    },
    "mmlu_pro_math": {
      "exact_match": true
    },
    "mmlu_pro_other": {
      "exact_match": true
    },
    "mmlu_pro_philosophy": {
      "exact_match": true
    },
    "mmlu_pro_physics": {
      "exact_match": true
    },
    "mmlu_pro_psychology": {
      "exact_match": true
    }
  },
  "n-samples": {
    "mmlu_pro_biology": {
      "original": 717,
      "effective": 717
    },
    "mmlu_pro_business": {
      "original": 789,
      "effective": 789
    },
    "mmlu_pro_chemistry": {
      "original": 1132,
      "effective": 1132
    },
    "mmlu_pro_computer_science": {
      "original": 410,
      "effective": 410
    },
    "mmlu_pro_economics": {
      "original": 844,
      "effective": 844
    },
    "mmlu_pro_engineering": {
      "original": 969,
      "effective": 969
    },
    "mmlu_pro_health": {
      "original": 818,
      "effective": 818
    },
    "mmlu_pro_history": {
      "original": 381,
      "effective": 381
    },
    "mmlu_pro_law": {
      "original": 1101,
      "effective": 1101
    },
    "mmlu_pro_math": {
      "original": 1351,
      "effective": 1351
    },
    "mmlu_pro_other": {
      "original": 924,
      "effective": 924
    },
    "mmlu_pro_philosophy": {
      "original": 499,
      "effective": 499
    },
    "mmlu_pro_physics": {
      "original": 1299,
      "effective": 1299
    },
    "mmlu_pro_psychology": {
      "original": 798,
      "effective": 798
    }
  },
  "config": {
    "model": "vllm",
    "model_args": "pretrained=meta-llama/Llama-3.1-70B-Instruct,dtype=auto,max_model_len=16384,max_gen_toks=4096,tensor_parallel_size=2,enable_chunked_prefill=False,enable_prefix_caching=False,gpu_memory_utilization=0.8,max_num_seqs=1,speculative_model=meta-llama/Llama-3.2-1B-Instruct,num_speculative_tokens=5,enforce_eager=True",
    "batch_size": "auto",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "58a74367",
  "date": 1732181843.9757984,
  "pretty_env_info": "PyTorch version: 2.5.1+cu124\nIs debug build: False\nCUDA used to build PyTorch: 12.4\nROCM used to build PyTorch: N/A\n\nOS: Ubuntu 22.04.5 LTS (x86_64)\nGCC version: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nClang version: Could not collect\nCMake version: Could not collect\nLibc version: glibc-2.35\n\nPython version: 3.10.12 (main, Nov  6 2024, 20:22:13) [GCC 11.4.0] (64-bit runtime)\nPython platform: Linux-5.15.0-126-generic-x86_64-with-glibc2.35\nIs CUDA available: True\nCUDA runtime version: Could not collect\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nGPU 0: NVIDIA H20\nGPU 1: NVIDIA H20\nGPU 2: NVIDIA H20\nGPU 3: NVIDIA H20\nGPU 4: NVIDIA H20\nGPU 5: NVIDIA H20\nGPU 6: NVIDIA H20\nGPU 7: NVIDIA H20\n\nNvidia driver version: 550.127.05\ncuDNN version: Could not collect\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:                         x86_64\nCPU op-mode(s):                       32-bit, 64-bit\nAddress sizes:                        52 bits physical, 48 bits virtual\nByte Order:                           Little Endian\nCPU(s):                               384\nOn-line CPU(s) list:                  0-383\nVendor ID:                            AuthenticAMD\nModel name:                           AMD EPYC 9K84 96-Core Processor\nCPU family:                           25\nModel:                                17\nThread(s) per core:                   2\nCore(s) per socket:                   96\nSocket(s):                            2\nStepping:                             0\nBogoMIPS:                             5199.97\nFlags:                                fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl nonstop_tsc cpuid extd_apicid amd_dcm tsc_known_freq pni pclmulqdq monitor ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm cmp_legacy cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw topoext perfctr_core invpcid_single ibpb vmmcall fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb avx512cd sha_ni avx512bw avx512vl xsaveopt xsavec xgetbv1 avx512_bf16 clzero xsaveerptr wbnoinvd arat avx512vbmi umip avx512_vbmi2 vaes vpclmulqdq avx512_vnni avx512_bitalg avx512_vpopcntdq rdpid fsrm\nHypervisor vendor:                    KVM\nVirtualization type:                  full\nL1d cache:                            6 MiB (192 instances)\nL1i cache:                            6 MiB (192 instances)\nL2 cache:                             192 MiB (192 instances)\nL3 cache:                             768 MiB (24 instances)\nNUMA node(s):                         2\nNUMA node0 CPU(s):                    0-191\nNUMA node1 CPU(s):                    192-383\nVulnerability Gather data sampling:   Not affected\nVulnerability Itlb multihit:          Not affected\nVulnerability L1tf:                   Not affected\nVulnerability Mds:                    Not affected\nVulnerability Meltdown:               Not affected\nVulnerability Mmio stale data:        Not affected\nVulnerability Reg file data sampling: Not affected\nVulnerability Retbleed:               Not affected\nVulnerability Spec rstack overflow:   Mitigation; safe RET, no microcode\nVulnerability Spec store bypass:      Vulnerable\nVulnerability Spectre v1:             Mitigation; usercopy/swapgs barriers and __user pointer sanitization\nVulnerability Spectre v2:             Mitigation; Retpolines; IBPB conditional; STIBP disabled; RSB filling; PBRSB-eIBRS Not affected; BHI Not affected\nVulnerability Srbds:                  Not affected\nVulnerability Tsx async abort:        Not affected\n\nVersions of relevant libraries:\n[pip3] numpy==1.26.4\n[pip3] torch==2.5.1\n[pip3] torchvision==0.20.1\n[pip3] triton==3.1.0\n[conda] Could not collect",
  "transformers_version": "4.46.3",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "<|eot_id|>",
    "128009"
  ],
  "tokenizer_eos_token": [
    "<|eot_id|>",
    "128009"
  ],
  "tokenizer_bos_token": [
    "<|begin_of_text|>",
    "128000"
  ],
  "eot_token_id": 128009,
  "max_length": 16384,
  "task_hashes": {
    "mmlu_pro_biology": "acb5d23928986634abfabb1787ecc6dd90c0d599e3830697bef11c0aebd5f239",
    "mmlu_pro_business": "bd4fdfa31133a74dc50f51c2b58957f8d9be51b6df869cf27ae125fe06a26e48",
    "mmlu_pro_chemistry": "c8f7834e355bc99606d4709483cbc762727835b7829f2aa2ed9a8d42b5bf3742",
    "mmlu_pro_computer_science": "74f01f212b154b0f0bb9ec3eec97609655458d069294c316298417f19ddf4f4a",
    "mmlu_pro_economics": "81afa333b92c1219f62e281a63ef809c2430ab1e52b4a068477c168473dfa5a1",
    "mmlu_pro_engineering": "d5faa7e4578166c2a98ea98a4694754a29438c9aa63c7deac6f92d5250a6cfb6",
    "mmlu_pro_health": "10b30f7ca353372309e35de977fcbc36a2613699fcfe6637fe7868f255008368",
    "mmlu_pro_history": "25b8046a156fb01a95190b41eb8dc1bfe68bbd721c9374f8847f6388677ab906",
    "mmlu_pro_law": "901b13a83f5073a674206efaf792f4e76574188b81cb5d5cc10cd37cf21bf396",
    "mmlu_pro_math": "0081ab88d8e068258dede17624070214b20b040deea2b6a4300f339ed100ea35",
    "mmlu_pro_other": "e15d460de6b956a636352d60f2c1cf6aaa4951b089bcd226f261671f8175f2df",
    "mmlu_pro_philosophy": "7703f53a1ec2eeb3a660edb5012e6586c002ac440f562021b6efe6a4bdb48d47",
    "mmlu_pro_physics": "dc4d6fd4b3ac945278112b54091792c4475dc20b3785abda84d217811f2019ca",
    "mmlu_pro_psychology": "986e9a7c6ce8a22bf61488e8e3cadeb9b99625cad02eb1c6f36eb7db794263c1"
  },
  "model_source": "vllm",
  "model_name": "meta-llama/Llama-3.1-70B-Instruct",
  "model_name_sanitized": "meta-llama__Llama-3.1-70B-Instruct",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": "{{- bos_token }}\n{%- if custom_tools is defined %}\n    {%- set tools = custom_tools %}\n{%- endif %}\n{%- if not tools_in_user_message is defined %}\n    {%- set tools_in_user_message = true %}\n{%- endif %}\n{%- if not date_string is defined %}\n    {%- set date_string = \"26 Jul 2024\" %}\n{%- endif %}\n{%- if not tools is defined %}\n    {%- set tools = none %}\n{%- endif %}\n\n{#- This block extracts the system message, so we can slot it into the right place. #}\n{%- if messages[0]['role'] == 'system' %}\n    {%- set system_message = messages[0]['content']|trim %}\n    {%- set messages = messages[1:] %}\n{%- else %}\n    {%- set system_message = \"\" %}\n{%- endif %}\n\n{#- System message + builtin tools #}\n{{- \"<|start_header_id|>system<|end_header_id|>\\n\\n\" }}\n{%- if builtin_tools is defined or tools is not none %}\n    {{- \"Environment: ipython\\n\" }}\n{%- endif %}\n{%- if builtin_tools is defined %}\n    {{- \"Tools: \" + builtin_tools | reject('equalto', 'code_interpreter') | join(\", \") + \"\\n\\n\"}}\n{%- endif %}\n{{- \"Cutting Knowledge Date: December 2023\\n\" }}\n{{- \"Today Date: \" + date_string + \"\\n\\n\" }}\n{%- if tools is not none and not tools_in_user_message %}\n    {{- \"You have access to the following functions. To call a function, please respond with JSON for a function call.\" }}\n    {{- 'Respond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.' }}\n    {{- \"Do not use variables.\\n\\n\" }}\n    {%- for t in tools %}\n        {{- t | tojson(indent=4) }}\n        {{- \"\\n\\n\" }}\n    {%- endfor %}\n{%- endif %}\n{{- system_message }}\n{{- \"<|eot_id|>\" }}\n\n{#- Custom tools are passed in a user message with some extra guidance #}\n{%- if tools_in_user_message and not tools is none %}\n    {#- Extract the first user message so we can plug it in here #}\n    {%- if messages | length != 0 %}\n        {%- set first_user_message = messages[0]['content']|trim %}\n        {%- set messages = messages[1:] %}\n    {%- else %}\n        {{- raise_exception(\"Cannot put tools in the first user message when there's no first user message!\") }}\n{%- endif %}\n    {{- '<|start_header_id|>user<|end_header_id|>\\n\\n' -}}\n    {{- \"Given the following functions, please respond with a JSON for a function call \" }}\n    {{- \"with its proper arguments that best answers the given prompt.\\n\\n\" }}\n    {{- 'Respond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.' }}\n    {{- \"Do not use variables.\\n\\n\" }}\n    {%- for t in tools %}\n        {{- t | tojson(indent=4) }}\n        {{- \"\\n\\n\" }}\n    {%- endfor %}\n    {{- first_user_message + \"<|eot_id|>\"}}\n{%- endif %}\n\n{%- for message in messages %}\n    {%- if not (message.role == 'ipython' or message.role == 'tool' or 'tool_calls' in message) %}\n        {{- '<|start_header_id|>' + message['role'] + '<|end_header_id|>\\n\\n'+ message['content'] | trim + '<|eot_id|>' }}\n    {%- elif 'tool_calls' in message %}\n        {%- if not message.tool_calls|length == 1 %}\n            {{- raise_exception(\"This model only supports single tool-calls at once!\") }}\n        {%- endif %}\n        {%- set tool_call = message.tool_calls[0].function %}\n        {%- if builtin_tools is defined and tool_call.name in builtin_tools %}\n            {{- '<|start_header_id|>assistant<|end_header_id|>\\n\\n' -}}\n            {{- \"<|python_tag|>\" + tool_call.name + \".call(\" }}\n            {%- for arg_name, arg_val in tool_call.arguments | items %}\n                {{- arg_name + '=\"' + arg_val + '\"' }}\n                {%- if not loop.last %}\n                    {{- \", \" }}\n                {%- endif %}\n                {%- endfor %}\n            {{- \")\" }}\n        {%- else  %}\n            {{- '<|start_header_id|>assistant<|end_header_id|>\\n\\n' -}}\n            {{- '{\"name\": \"' + tool_call.name + '\", ' }}\n            {{- '\"parameters\": ' }}\n            {{- tool_call.arguments | tojson }}\n            {{- \"}\" }}\n        {%- endif %}\n        {%- if builtin_tools is defined %}\n            {#- This means we're in ipython mode #}\n            {{- \"<|eom_id|>\" }}\n        {%- else %}\n            {{- \"<|eot_id|>\" }}\n        {%- endif %}\n    {%- elif message.role == \"tool\" or message.role == \"ipython\" %}\n        {{- \"<|start_header_id|>ipython<|end_header_id|>\\n\\n\" }}\n        {%- if message.content is mapping or message.content is iterable %}\n            {{- message.content | tojson }}\n        {%- else %}\n            {{- message.content }}\n        {%- endif %}\n        {{- \"<|eot_id|>\" }}\n    {%- endif %}\n{%- endfor %}\n{%- if add_generation_prompt %}\n    {{- '<|start_header_id|>assistant<|end_header_id|>\\n\\n' }}\n{%- endif %}\n",
  "chat_template_sha": "e10ca381b1ccc5cf9db52e371f3b6651576caee0a630b452e2816b2d404d4b65",
  "start_time": 108149.979483163,
  "end_time": 257551.177317192,
  "total_evaluation_time_seconds": "149401.19783402898"
}